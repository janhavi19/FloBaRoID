
#### trajectory generation and excitation

optimizeTrajectory: 1            #find new parameters with optimization or load previous params from file (if no file exists, use random)

# trajectory optimization
useGlobalOptimization: 1         #use global solver first (recommended)
globalSolver: 'ALPSO'            #ALPSO (particle swarm) or NSGA2 (genetic algorithm)
globalOptIterations: 10          #Swarm iterations or Generations
globalOptSize: 100               #Swarm size (any) or Population size (multiple of 4)
useLocalOptimization: 1          #do local optimization after using global solver
localSolver: 'SLSQP'             #one of SLSQP, PSQP, IPOPT (all three gradient); COBYLA (no gradient)
localOptIterations: 2            #how many optimizer iterations to use. this is not equal to function calls if gradients are approximated
minTolConstr: 0.01               #threshold for being within constraints (only used for display)
showOptimizationGraph: 1         #display updating graph during trajectory optimization
showOptimizationTrajs: 1         #display the trajectory plot after each optimization step
showModelVisualization: 0        #display 3D model of robot during optimization (static only atm)

ignoreLinksForCollision: []      #don't include these links for collision testing at all
ignoreLinkPairsForCollision: []  #don't check collision between these pairs

# initial values to start optimization from (if using global opt not really important)
trajectoryPulseInit: 0.75        #determines length of one period of trajectory (smaller=longer)
trajectoryPulseMin:  0.5
trajectoryPulseMax:  1.0
trajectoryCoeffInit: 0.1         #set this as high as possible without violating velocity constraints (see output after start)
trajectoryCoeffMin: -0.4         #determines in which range the chosen params have to be (smaller=lower vel)
trajectoryCoeffMax:  0.4
trajectoryAngleMin: -10.0        #determines the range in which the pulsation center for each joint will be (in degrees)
trajectoryAngleMax: 10.0

# instead of one range, define individual ranges for each link. initial is the center of these
# ranges. If ..AngleMin/Max is to be used for all of them, set to null
trajectoryAngleRanges:
    - null
 #   [[-10.9745248069, 8.9797344371],
 #    [-18.9543738355, 8.9746393985],
 #    [-27.938974128, 13.9696016556],
 #    [10.0,          30.929013234],
 #    [-12.9596980573, 5.9797344371],
 #    [-8.9771869178, 8.9771869178]
 #   ]

# manual angle limits: pairs of upper and lower (in degrees). put in null to use values from URDF
# (or leave completely empty)
ovrPosLimit:
    - null
    - null 
    - null
    - null
    - null
    - null
    - null

# maximize smallest velocity for each joint (better excitation of parameters)
# (implemented as penalty, so will not necessarily reach the set value)
minVelocityConstraint: 0
minVelocityPercentage: 0.1

# static posture optimization (for gravity term identification)
useStaticTrajectories: 0         #generate simple 'trajectories' of static postures for identification of gravity terms
numStaticPostures: 10             #how many postures to generate (must be >1)
scaleCollisionHull: 0.8          #scale urdf hull sizes for collision testing
staticPostureTime: 0.02          # time in s per posture (nr. of samples => this * number of postures)
initialPostures: []              #for static optimization, feasible postures to start from (useful only when not using global optimization)

# excitation
excitationSimulate: 1            #simulate torques instead of using measurements to save to data files (use e.g. with Gazebo)
exciteMethod: null #'yarp'       #currently 'yarp', 'ros' or null
ros_move_group: ''               #if using ros, what move group to use for excitation
excitationFrequency: 200.0       #data frequency for generating trajectories (should correspond to actual data transfer frequency)
useDeg: 1                        #encode angles in degrees for excitation (internal and data is always in rad)

#### data preprocessing and selection

# median filter that is used to remove outliers before low-pass
filterMedianSize: 11

# low-pass butter worth filter that is used to filter positions, torques and IMU accelerations
# 2-tuple of cut-off and order of filter
filterLowPass1: [8.0, 5]
filterLowPass2: [6.0, 5]        # low-pass for joint velocities
filterLowPass3: [3.0, 4]        # low-pass for external contact force data and IMU rpy estimation

# use subset of samples
startOffset: 650    #how many samples from the beginning of each measurement file are skipped
skipSamples: 6      #how many values to skip before using the next sample

# whether only "good" data is being selected or simply all is used (selected by condition number)
selectBlocksFromMeasurements: 0
blockSize: 50  # needs to be at least as much as parameters so regressor is square or higher
selectBestPerenctage: 70   #select percentage of blocks sorted by condition number

removeNearZero: 0   #remove samples that have almost zero velocity
minVel: 0.01        #velocity that one of a sample's joints needs to have for the sample to be used (rad/s)

# IMU processing (floating base)
waitForZeroAcc: 1   #when integrating IMU linear acceleration, wait for first time with (almost) no acceleration to start at zero velocity
zeroAccThresh: 0.4  #threshold below which acceleration is considered to be zero (m/s^2)

#### identification

# use a number of random regressors to determine structural parameter dependencies when getting base regressor
# (generally recommended but may result in remaining linear dependencies in regressor if only limited data is used)
useStructuralRegressor: 1
randomSamples: 10000

# almost zero threshold for determining base column dependencies from QR
# (important: set to a value so that base parameters are estimated reasonably close to CAD, set
# option showBaseParams below)
minTol: 0.005

# fixed or floating-base dynamics
floatingBase: 1

# identify motor friction (constant sign dependent offset and velocity dependent)
identifyFriction: 1

# identify only one friction value for both directions (necessary for URDF)
identifySymmetricVelFriction: 1

# identify only parameters corresponding to gravity terms (mass, mass*COM) for static configurations
identifyGravityParamsOnly: 0

# simulate torques from target values, don't use both
simulateTorques: 0    #simulate torque for measured angles etc using idyntree (instead of reading from data)

# use RBDL for simulation (forward kinematics) instead of iDynTree
useRBDL: 0

## constrained SDP to solve OLS

# constrain std params to physical consistent space to only achieve physical consistent parameters
# (currently this also does the estimation, so previously selecting another method has no effect)
# if only torque estimation is desired, not using this option might give a better model
# accuracy with approriate parameters
constrainToConsistent: 1
checkAPrioriFeasibility: 0

# identify in two steps: first get feasible solution, then minimize distance to CAD while
# staying in previous solution nullspace (using SDP)
identifyClosestToCAD: 0

# use a non-linear gradient based solver instead of SDP
constrainUsingNL: 0
nlOptMaxIterations: 500
nlOptSolver: 'IPOPT'   # one of IPOPT, SLSQP, ALPSO

# constrain parameters for links more than a certain condition number to the a priori values
# (to prevent very big changes for parameters that are not expressed well in the data)
noChange: 0
noChangeThresh: 2200

# restrict COM to smallest enclosing box of STL Mesh (taken from <visual> in URDF)
restrictCOMtoHull: 1
# set extra scaling for mesh (e.g. if it is clear that COM will not be at outer border of
# geometry or that initial CAD data is too large)
hullScaling: 0.7
# name of the directory after the package base name (as in package://basename/)
meshBaseDir: 'meshes'
# fallback cube size (in case mesh file is not found, a cube with the old value in the center is used)
cubeSize: 0.5

# force COM values to stay close to a priori values (disable hull constraints when enabled)
limitCOMToApriori: 0
limitCOMAprioriBoundary: 0.005     #allowed change of CAD value in both +- directions (1.0 = 100%)

# constrain overall mass
limitOverallMass: 1
# if overall mass is set, constrain mass close to this value. If null, use a priori mass sum
limitMassVal: 139.142 #114.94
#allowed percentual change in both directions (1-range and 1+range)
limitMassRange: 0.2

# enforce staying around the a priori masses (only set this or a combination of the other
# two mass limiting options to prevent constraint conflicts which result in problem
# infeasibility!)
limitMassToApriori: 1
limitMassAprioriBoundary: 0.05     #allowed change of CAD value in both +- directions (1.0 = 100%)

# specify single params that will be constrained to the CAD values
dontChangeParams: []

# don't constrain some parameters that are otherwise included through group constraint options
dontConstrain: []

# define constraints for link symmetries (e.g. left and right arm)
useSymmetryConstraints: 0
# allow some difference between symmetry pairs (1.0 = 100%)
symmetryTolerance: 0.1
# tuples of two parameter ids each that should be equal and 1/-1 to allow negative symmetric, e.g.
# [p1, p2, sign]
symmetryConstraints:
    - [10, 70, 1]   #L/RHipMot
    - [11, 71, 1]
    - [12, 72, -1]
    - [13, 73, 1]
    - [14, 74, 1]
    - [15, 75, -1]
    - [16, 76, 1]
    - [17, 77, 1]
    - [18, 78, -1]
    - [19, 79, 1]
    - [20, 80, 1]   #L/RThighUpLeg
    - [21, 81, 1]
    - [22, 82, -1]
    - [23, 83, 1]
    - [24, 84, 1]
    - [25, 85, -1]
    - [26, 86, 1]
    - [27, 87, 1]
    - [28, 88, -1]
    - [29, 89, 1]
    - [30, 90, 1]   #L/RThighLowLeg
    - [31, 91, 1]
    - [32, 92, -1]
    - [33, 93, 1]
    - [34, 94, 1]
    - [35, 95, -1]
    - [36, 96, 1]
    - [37, 97, 1]
    - [38, 98, -1]
    - [39, 99, 1]
    - [40, 100, 1]   #L/RLowLeg
    - [41, 101, 1]
    - [42, 102, -1]
    - [43, 103, 1]
    - [44, 104, 1]
    - [45, 105, -1]
    - [46, 106, 1]
    - [47, 107, 1]
    - [48, 108, -1]
    - [49, 109, 1]
    - [50, 110, 1]   #L/RFootMot
    - [51, 111, 1]
    - [52, 112, -1]
    - [53, 113, 1]
    - [54, 114, 1]
    - [55, 115, -1]
    - [56, 116, 1]
    - [57, 117, 1]
    - [58, 118, -1]
    - [59, 119, 1]
    - [60, 120, 1]  #L/RFoot
    - [61, 121, 1]
    - [62, 122, -1]
    - [63, 123, 1]
    - [64, 124, 1]
    - [65, 125, -1]
    - [66, 126, 1]
    - [67, 127, 1]
    - [68, 128, -1]
    - [69, 129, 1]
    - [160,280, 1]  #'L/RShp'
    - [161,281, 1]
    - [162,282, -1]
    - [163,283, 1]
    - [164,284, 1]
    - [165,285, -1]
    - [166,286, 1]
    - [167,287, 1]
    - [168,288, -1]
    - [169,289, 1]
    - [170,290, 1]  #'L/RShr'
    - [171,291, 1]
    - [172,292, -1]
    - [173,293, 1]
    - [174,294, 1]
    - [175,295, -1]
    - [176,296, 1]
    - [177,297, 1]
    - [178,298, -1]
    - [179,299, 1]
    - [180,300, 1]  #'L/RShy'
    - [181,301, 1]
    - [182,302, -1]
    - [183,303, 1]
    - [184,304, 1]
    - [185,305, -1]
    - [186,306, 1]
    - [187,307, 1]
    - [188,308, -1]
    - [189,309, 1]
    - [190,310, 1]  #'L/RElb'
    - [191,311, 1]
    - [192,312, -1]
    - [193,313, 1]
    - [194,314, 1]
    - [195,315, -1]
    - [196,316, 1]
    - [197,317, 1]
    - [198,318, -1]
    - [199,319, 1]
    - [200,320, 1]  #'L/RForearm'
    - [201,321, 1]
    - [202,322, -1]
    - [203,323, 1]
    - [204,324, 1]
    - [205,325, -1]
    - [206,326, 1]
    - [207,327, 1]
    - [208,328, -1]
    - [209,329, 1]
    - [210,330, 1]  #'L/RWrMot2'
    - [211,331, 1]
    - [212,332, -1]
    - [213,333, 1]
    - [214,334, 1]
    - [215,335, -1]
    - [216,336, 1]
    - [217,337, 1]
    - [218,338, -1]
    - [219,339, 1]
    - [220,340, 1]  #'L/RWrMot3'
    - [221,341, 1]
    - [222,342, -1]
    - [223,343, 1]
    - [224,344, 1]
    - [225,345, -1]
    - [226,346, 1]
    - [227,347, 1]
    - [228,348, -1]
    - [229,349, 1]
    - [230,350, 1] #'L/RSoftHandLink'
    - [231,351, 1]
    - [232,352, 1]
    - [233,353, 1]
    - [234,354, 1]
    - [235,355, 1]
    - [236,356, 1]
    - [237,357, 1]
    - [238,358, 1]
    - [239,359, 1]

## other forms of OLS

# use previously known CAD parameters to identify parameter error, estimates parameters closer to
# known ones (taken from URDF file)
# for some methods, this gives parameters that are more likely to be consistent
# (not used with constrained SDP solver)
useAPriori: 0

# identify std parameters directly, but only for essential parameters (Gautier, 2013)
useEssentialParams: 0

# after getting essential base params, include dependent std columns for std essential params
useDependents: 0

# use weighted least squares(WLS) instead of ordinary least squares
# needs small condition number, otherwise might amplify some parameters too much as the
# covariance estimation can be wrong (also assumes that error is zero mean and normal
# distributed)
useWLS: 0

# whether to filter the regressor columns (cutoff frequency is system dependent)
# possibly increases accuracy when torque ripples are present. also supposedly decreases
# correlation between (observation) regressor and measured torques
filterRegressor: 0
filterRegCutoff: 5   #frequency in Hz

## output and debugging

# plotting
createPlots: 1               #create or show plots of measurements and estimated values
outputModule: 'matplotlib'   #how to output plots (atm only ['matplotlib'])
outputAs: 'html'              #one of ['html', 'pdf', 'tikz', 'interactive']
outputFilename: 'output_walkman_cad.html'    #specify custom filename for output file
plotBaseDynamics: 1          #when using floating base, plot base forces or not
plotPerJoint: 1              #plot each joint torque in one graph
plotPrioriTorques: 1         #plot the computed torques from the a priori model parameters
plotErrors: 0                #plot errors into torque graphs
plotLegend: 1                #show plot legend

showRandomRegressor: 0       #show 2d plot of random regressor
showErrorHistogram: 0        #show estimation error distribution

# options for console output
showMemUsage: 0              #print used memory for different variables
showTiming: 0                #show times various steps have taken
showEssentialSteps: 0        #stop after every reduction step and show values
outputBarycentric: 0         #output all values in barycentric (e.g. urdf) form
showStandardParams: 1        #display a list of identified standard params
showBaseParams: 1            #display a list of identified base params (if applicable)
showBaseEqns: 0              #show which std params are combined for each base param
outputLatex: 0               #format parameter output as latex
showTriangleConsistency: 0   #show per-link consistency including triangle inequality
verbose: 1                   #show more messages, [0,1,2]

# which parameters to use when estimating torques for validation. Set to one of
# ['base', 'std', 'urdf']
estimateWith: 'std'
